library(gplots)
?heatmap.2
paste('sample', 1:10)
library(edgeR)
?glmQLFTest
dataMat <- read.delim('~/../Desktop/Wiley_RS2_samples.docx')
dataMat <- read.delim('clipboard')
dataMat
design <- model.matrix(~Gender+Set+Phenotype, data = dataMat)
design
design <- model.matrix(~Gender+Phenotype, data = dataMat)
design
View(dataMat)
design <- model.matrix(~0+Gender:Phenotype + Set:Phenotype, data = dataMat)
design
dim(design)
design <- model.matrix(~0+Gender+ Set:Phenotype, data = dataMat)
design
colnames(dataMat)
dataMat[,(4,5,7)] <- as.factor(dataMat[,c(4,5,7)])
dataMat[,c(4,5,7)] <- as.factor(dataMat[,c(4,5,7)])
dataMat$Gender <- as.factor(dataMat$Gender)
dataMat$Phenotype <- as.fat
dataMat$Phenotype <- as.factor(dataMat$Phenotype)
dataMat$Set <- as.factor(dataMat$Set)
head(dataMat)
design <- model.matrix(~0+Gender+ Set:Phenotype, data = dataMat)
design
View(dataMat)
dataMat$Phenotype
uniq(dataMat$Phenotype)
unique(dataMat$Phenotype)
as.character(dataMat$Phenotype)
dataMat <- trimws(dataMat)
dataMat
dataMat <- read.delim('clipboard')
trimws(dataMat$Gender)
dataMat$Gender <- trimws(dataMat$Gender)
table(dataMat$Gender)
table(dataMat$Phenotype)
table(dataMat$Set)
dataMat$Gender <- as.factor(trimws(dataMat$Gender))
dataMat$Gender
dataMat$Phenotype <- as.factor(trimws(dataMat$Phenotype))
dataMat$Phenotype
dataMat$Set <- as.factor(trimws(dataMat$Set))
dataMat$Set
design <- model.matrix(0 + Gender + Phenotype:Set, data = dataMat)
design <- model.matrix(0 +Gender+Phenotype:Set, data = dataMat)
head(dataMat)
design <- model.matrix(~0 +Gender+Phenotype:Set, data = dataMat)
design
design <- model.matrix(~0 +Gender+ Set + Phenotype, data = dataMat)
design
design <- model.matrix(~Phenotype +Phenotype:Gender+ Phenotype:Set, data = dataMat)
design
model.matrix(~0 +Phenotype:Gender+ Phenotype:Set, data = dataMat)
?glm.fit
?glmFit
library(BiocInstaller)
biocLite('sva')
library(sva)
?ComBat
design
design <- model.matrix(~0 +Gender:Phenotype+ Set:Phenotype, data = dataMat)
design
model.matrix(~Gender + Phenotype, data = dataMat)
?Reduce
biocLite('Rsubread')
library(Rsubread)
biocLite('Rsubread')
?commandArgs
writeLines ("#################################################################################
\n\nUsage:\nRscript generate_flattened_gtf.R input_gtf output_gtf ignore_strand
input_gtf: path to input gtf
output_gtf: path to output gtf
ignore_strand: ignore strand or not. TRUE/FALSE
##################################################################################")
library(DEXSeq)
?DEXSeqDataSetFromHTSeq
inDir = system.file("extdata", package="pasilla", mustWork=TRUE)
flattenedfile = file.path(inDir, "Dmel.BDGP5.25.62.DEXSeq.chr.gff")
sampleData = data.frame(
condition = c( rep("treated", 3), rep("untreated", 4) ),
type = c("single", "paired", "paired", "single", "single", "paired", "paired") )
install.packages(pasilla)
install.packages('pasilla')
biocLite('pasilla')
inDir = system.file("extdata", package="pasilla", mustWork=TRUE)
flattenedfile = file.path(inDir, "Dmel.BDGP5.25.62.DEXSeq.chr.gff")
sampleData = data.frame(
condition = c( rep("treated", 3), rep("untreated", 4) ),
type = c("single", "paired", "paired", "single", "single", "paired", "paired") )
sampleData
countFiles <- list.files(inDir, pattern="fb.txt")
rownames( sampleData ) <- countFiles
countFiles
sampleData
?DEXSeqHTML
library(rtracklayer)
biocLite('rtracklayer')
library(GenomicRanges)
library('rtracklayer')
?export
?quantile
head(dataMat)
quantile(1:10, 0.1)
quantile(1:9, 0.1)
print('Doint DEG analysis')
cat('Doint DEG analysis')
cat('Doint DEG analysis', '\n')
cat('Doint DEG analysis', '\n', 'somehting')
cat('Doint DEG analysis', 'somehting')
?do.calll
?do.call
class('TRUE')
class(TRUE)
as.logical('TRUE')
?disjoin
?quantile
?read.table
?match
library(dplyr)
?rowwise
?apply
matrix(nrow=10, ncol=12)
tpm <- matrix(nrow=10, ncol=12)
tpm[1,1:2] <- c(1, 's')
tpm
tpm <- as.data.frame(matrix(nrow=10, ncol=12))
tpm[1,1:2] <- c(1, 's')
tpm
str(tpm)
tpm <- as.data.frame(matrix('NA', nrow=10, ncol=12))
tpm
str(tpm)
tpm <- as.data.frame(matrix('NA', nrow=10, ncol=12), stringAsFactors=F)
str(tpm)
tpm <- as.data.frame(matrix('NA', nrow=10, ncol=12), stringsAsFactors=F)
str(tpm)
tpm[1,1:2] <- data.frame(id = 1, cl = 'ls')
tpm
str(tpm)
tpm <- as.data.frame(matrix('NA', nrow=10, ncol=2), stringsAsFactors=F)
str(tpm)
tpm[1,1:2] <- data.frame(id = 1, cl = 'ls')
tpm
tpm[1,1:2] <- c(1, 'ls')
tpm
str(tpm)
is.na(tpm$V1)
tpm$V1 ==
'NA'
?set
tpm
library(data.table)
as.data.table(tpm)
as.data.table(tpm)$V1
set(tpm, 1,1:2, as.list(2,'test'))
tpm
set(tpm, 1,1:2, as.list(c(2,'test')))
set(tpm, 1,1:2, as.list(c(2L,'test')))
tpm
set(tpm, 1L,1L:2L, as.list(c(2L,'test')))
tpm
library(BiocParallel)
detectCores()
